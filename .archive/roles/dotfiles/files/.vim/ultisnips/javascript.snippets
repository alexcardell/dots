snippet "imp(ort|or|o)?" "import" br
import ${1:module} from '${2:`!p snip.rv = t[1].lower()`}';
endsnippet

snippet "req(uire|uir|ui|u)?" "require" br
const ${1:ModuleName} = require('${2:`!p snip.rv = t[1].lower()`}');
endsnippet

snippet "cla(ss|s)?" "class" br
class ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet "con(st|s)?" "const" br
const ${1} = ${0:0};
endsnippet

snippet fn "function" b
const ${1:fn} = (${2}) => {
	${0:${VISUAL:return;}}
};
endsnippet

########
# Jest #
########
snippet "des(cribe|crib|cri|cr|c)?" "describe()" br
describe('${1:Test suite}', () => {
	${0}
});
endsnippet

snippet "aft(er|e)?" "afterEach" br
after${1:Each}(() => {
	${0}
});
endsnippet


snippet "bef(ore|or|e)?" "before[Each]()" br
before${1:Each}(() => {
	${0}
});
endsnippet

snippet it "it() block" b
it('${1:Does something}', () => {
	const expected = ${2:0};
	const actual = ${3:0};
	${0}
});
endsnippet

snippet test "test() block" b
test('${1:Does something}', () => {
	const expected = ${2:0};
	const actual = ${3:0};
	${0}
});
endsnippet

snippet ex "expect() assertion" b
expect(actual).to${3:Be}(expected);
endsnippet

snippet exn "expect() assertion" b
expect(actual).not.to${3:Be}(expected);
endsnippet

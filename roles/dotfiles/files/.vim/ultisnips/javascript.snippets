snippet "imp(o,or,ort)?" "import" br
import ${1:module} from '${2:`!p snip.rv = t[1].lower()`}${3}';
endsnippet

snippet "req(u|ui|uir|uire)?" "require" br
const ${1:ModuleName} = require('${2:`!p snip.rv = t[1].lower()`}');
endsnippet

snippet "cla(s|ss)?" "class" r
class ${1} {
	${2:${VISUAL:code}}
}
endsnippet

########
# Jest #
########
snippet "desc?" "describe()" br
describe('${1:Test suite}', () => {
	${2}
});
endsnippet

snippet aft "after()" b
afterEach(() => {
	${1}
});
endsnippet

snippet bef "beforeEach()" b
before${1:Each}(() => {
	${0}
});
endsnippet

snippet it "it() block" b
it('${1:Does something}', () => {
	const expected = ${2:/* expected */};
	const actual = ${3:/* actual */};
	${0}
});
endsnippet

snippet test "test() block" b
test('${1:Does something}', () => {
	const expected = ${2:/* expected */};
	const actual = ${3:/* actual */};
	${0}
});
endsnippet

snippet ex "expect() assertion" b
expect(actual).to${3:Be}(expected);
endsnippet

snippet exn "expect() assertion" b
expect(actual).not.to${3:Be}(expected);
endsnippet

snippet fn "function" b
const ${1:fn} = (${2}) => {
	${0:${VISUAL:\/* code *\/}}
};
endsnippet

set encoding=UTF-8

if exists('$SUDO_USER')  " no root owned files
  set noswapfile
  set nobackup
  set nowritebackup
  set noundofile
  if has('nvim')
    set shada="NONE"
  endif
else
  " keep backup files out of the way
  set backupdir=~/.local/share/nvim/backup//
  " keep swap files out of the way
  set directory=~/.local/share/nvim/swap//
  " keep undo files out of the way
  if has('persistent_undo')
    set undodir=~/.local/share/nvim/undo//
    set undofile  " enable undo files
    set undolevels=100
  endif
endif

if !has('nvim')
  set viminfo="NONE"
endif

imap jk <Esc>

let mapleader="\<Space>"
let maplocalleader="\\"

filetype indent plugin on
syntax on

" Load local overrides ~/.vim/vimrc.local
let s:vimrc_local = $HOME . '/.vim/vimrc.local'
if filereadable(s:vimrc_local)
  execute 'source ' . s:vimrc_local
endif

set rtp+=~/.fzf

set completeopt=menu,menuone,noselect

call plug#begin('~/.vim/plug')

" Some lua plugins depend on plenary
Plug 'nvim-lua/plenary.nvim'

" Basic editing
Plug 'junegunn/fzf.vim'
Plug 'kshenoy/vim-signature'
Plug 'mbbill/undotree'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'wincent/loupe'

" Navigation
Plug 'kyazdani42/nvim-tree.lua'

" Treesitter
Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
Plug 'mfussenegger/nvim-ts-hint-textobject'

" LSP
Plug 'neovim/nvim-lspconfig'
" Plug 'nvim-lua/completion-nvim'
Plug 'scalameta/nvim-metals'

" VCS
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'airblade/vim-gitgutter'
Plug 'pwntester/octo.nvim'

" Appearance
Plug 'rrethy/nvim-base16'
Plug 'lukas-reineke/indent-blankline.nvim'

" Syntax
Plug 'editorconfig/editorconfig-vim'
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'peitalin/vim-jsx-typescript', { 'for': 'typescript' }
Plug 'reasonml-editor/vim-reason-plus', { 'for': 'reason' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'rescript-lang/vim-rescript'
Plug 'LnL7/vim-nix'

" Telescope
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope.nvim'

" Completion
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'dcampos/nvim-snippy'
Plug 'dcampos/cmp-snippy'

" LSP customisation
Plug 'kosayoda/nvim-lightbulb'
Plug 'onsails/lspkind-nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'onsails/diaglist.nvim'
Plug 'ray-x/lsp_signature.nvim'
Plug 'simrat39/symbols-outline.nvim'

" Linting
Plug 'mfussenegger/nvim-lint'

" DAP
Plug 'mfussenegger/nvim-dap'
Plug 'theHamsta/nvim-dap-virtual-text'

" Misc
" Plug 'SirVer/ultisnips'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'tpope/vim-projectionist'
" Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }

" Temp disabled
" Plug 'wakatime/vim-wakatime'

" Prose
" Plug 'lervag/wiki.vim'
Plug 'reedes/vim-pencil', { 'for': 'markdown' }
Plug 'iamcco/markdown-preview.nvim', { 'for': 'markdown', 'do': 'cd app && yarn install' }
Plug 'mickael-menu/zk-nvim'

call plug#end()

" let g:wiki_root = '~/Wiki'
" let g:wiki_filetypes = ['md']
" let g:wiki_link_target_type = 'wiki'

lua require('nvim-tree').setup()

lua require('zk').setup({ picker = 'fzf' })
